use online_food_del;

-- DAY-7 Theme: Summarizing Queries
-- 1.Total Orders per City
-- city->restaurants
-- count(order_id) -->orders
-- group by city

select r.city, count(o.order_id) as total_orders
from restaurants r
join orders o
on r.restaurant_id = o.restaurant_id
group by r.city
order by total_orders desc;
-- Summary
-- Boost Jaipur operations to leverage its high order volume.
-- Run promotions in Mumbai and Ahmedabad to improve performance.
-- Target Pune, Surat, and Chennai for quick growth gains.
-- Analyze Bangalore and Kolkata for user behavior and service gaps.

-- 2.Revenue Generated by Each Food Item
-- revenue = m.price *od.quantity 
-- group by item_name -->menu_items

select m.item_name, Sum(m.price * od.quantity) as Item_Revenue
from menu_items m
join order_details od
on m.item_id = od.item_id
group by m.item_name
order by Item_Revenue desc;

-- Promote high-revenue items like Aloo Paratha and Fish Curry to boost overall sales.
-- Introduce combo deals around popular dishes such as Hakka Noodles and Momos.
-- Explore upselling or premium versions for mid-range earners like Paneer Tikka and Butter Masala.
-- Analyze low-performing items for possible removal or rework to optimize menu offerings.

-- DAY-7 TASKS LIST
-- 1. Top 5 Spending Customers

select c.customer_id, c.customer_name , sum(m.price*od.quantity) as Total_Spending
from customers c
join orders o
on c.customer_id = o.customer_id
join order_details od on
o.order_id = od.order_id
join menu_items m
on od.item_id = m.item_id
group by c.customer_id, c.customer_name
order by Total_Spending desc
limit 5;

-- Reyansh Patel is the highest spender with â‚¹19,783.83, consider offering him exclusive loyalty rewards.
-- Vihaan Nair and Krishna Nair closely follow; personalized promotions can help retain them.
-- Ishaan Sharma and Ishaan Singh round out the top 5, showing good potential for upselling opportunities.
-- Focus marketing efforts on these top customers to boost repeat purchases and brand loyalty.

-- 2. Restaurant-wise Order Count
-- r.restaurant_id, r.restaurant_name, count(o.order_id) as rwocount
-- group by r.restaurant_id
select r.restaurant_id, r.restaurant_name, count(o.order_id) as Restaurant_wise_orders
from restaurants r
join orders o
on r.restaurant_id = o.restaurant_id
group by r.restaurant_id, r.restaurant_name
order by Restaurant_wise_orders desc;

-- 3. Average Order Value by City
-- Step 1: Calculate total amount spent per order (price * quantity) from order_details and menu_items
-- Step 2: Join this order total with orders and restaurants to get the city for each order
-- Step 3: Group the results by city
-- Step 4: Calculate the average order value for each city using AVG(order_total)

select r.city, avg(order_total) as City_wise_AvgOrder
from restaurants r
join orders o
on r.restaurant_id = o.restaurant_id
join(
	select od.order_id, sum(m.price*od.quantity) as order_total
    from order_details od
    join menu_items m
    on od.item_id = m.item_id
    group by od.order_id
)order_totals on o.order_id = order_totals.order_id
group by r.city;
